#!/usr/bin/env python

import sys
import glob
import os
import re

def run(in_, f_out):
	# read input file and parse taxonomy information
	f_in = open(in_, "r")

	# header
	header = f_in.readline()
	a_header = header.split("\t")
	f_out.write("domain\trank\tname\tlineage\t%s" % ("\t".join(a_header[1:])))

	# anubdance profile
	p = re.compile("(\w)__(\S+)$")
	for line in f_in.readlines():
		a_all = line[:-1].split("\t")
		lineage_info = a_all[0]
		abundances = "\t".join(a_all[1:])
		s_count = lineage_info.count('|')
		a_name = lineage_info.split('|')

		# extract taxonomy level and taxonomy name
		m = p.search(a_name[s_count])
		if m:
			level = m.group(1)
			name = m.group(2)
		else:
			raise Exception("Regular expression pattern didn't match.")

		d_name = a_name[0][3:]

		if level == "d" or level == "k":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "domain", name, lineage_info, abundances))
		if level == "p":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "phylum", name, lineage_info, abundances))
		if level == "c":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "class", name, lineage_info, abundances))
		if level == "o":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "order", name, lineage_info, abundances))
		if level == "f":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "family", name, lineage_info, abundances))
		if level == "g":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "genus", name, lineage_info, abundances))
		if level == "s":
			f_out.write("%s\t%s\t%s\t%s\t%s\n" % (d_name, "species", name, lineage_info, abundances))

	f_in.close()
	f_out.close()


def main(argv):
	import argparse # to use this module python version must be higher than 2.7
	# parse input arguments
	parser = argparse.ArgumentParser(description='This script is to parse the profile file generated by metaphlan. \
Copyright (C) 2015 Yasumasa Kimura, Division of Systems Immunology, Institute of Medical Science, The University of Tokyo, Tokyo, Japan.')
	parser.add_argument('input', help='input metaphlan profile data (lineage info <tab> relative abundance)')
	parser.add_argument('-v', '--version', action='version', version='%(prog)s 2018.05.10')
	parser.add_argument('-o', '--output', action='store', dest='out_', help='output file name', default=None)
	args = parser.parse_args()

	# output file
	if args.out_:
		f_out = open(args.out_, 'w')
	else:
		f_out = sys.stdout

	run(args.input, f_out)
	if args.out_:
		f_out.close()

if __name__ == "__main__":
	main(sys.argv[1:])

